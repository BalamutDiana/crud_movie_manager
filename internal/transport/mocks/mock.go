// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_transport is a generated GoMock package.
package mock_transport

import (
	context "context"
	reflect "reflect"

	domain "github.com/BalamutDiana/crud_movie_manager/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMovies is a mock of Movies interface.
type MockMovies struct {
	ctrl     *gomock.Controller
	recorder *MockMoviesMockRecorder
}

// MockMoviesMockRecorder is the mock recorder for MockMovies.
type MockMoviesMockRecorder struct {
	mock *MockMovies
}

// NewMockMovies creates a new mock instance.
func NewMockMovies(ctrl *gomock.Controller) *MockMovies {
	mock := &MockMovies{ctrl: ctrl}
	mock.recorder = &MockMoviesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovies) EXPECT() *MockMoviesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovies) Create(ctx context.Context, movie domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMoviesMockRecorder) Create(ctx, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovies)(nil).Create), ctx, movie)
}

// DeleteMovie mocks base method.
func (m *MockMovies) DeleteMovie(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMoviesMockRecorder) DeleteMovie(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovies)(nil).DeleteMovie), ctx, id)
}

// GetMovieByID mocks base method.
func (m *MockMovies) GetMovieByID(ctx context.Context, id int64) (domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByID", ctx, id)
	ret0, _ := ret[0].(domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByID indicates an expected call of GetMovieByID.
func (mr *MockMoviesMockRecorder) GetMovieByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByID", reflect.TypeOf((*MockMovies)(nil).GetMovieByID), ctx, id)
}

// List mocks base method.
func (m *MockMovies) List(ctx context.Context) ([]domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMoviesMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMovies)(nil).List), ctx)
}

// UpdateMovie mocks base method.
func (m *MockMovies) UpdateMovie(ctx context.Context, id int64, newMovie domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, id, newMovie)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMoviesMockRecorder) UpdateMovie(ctx, id, newMovie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovies)(nil).UpdateMovie), ctx, id, newMovie)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockUser) ParseToken(ctx context.Context, token string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockUserMockRecorder) ParseToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUser)(nil).ParseToken), ctx, token)
}

// RefreshTokens mocks base method.
func (m *MockUser) RefreshTokens(ctx context.Context, refreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockUserMockRecorder) RefreshTokens(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockUser)(nil).RefreshTokens), ctx, refreshToken)
}

// SignIn mocks base method.
func (m *MockUser) SignIn(ctx context.Context, inp domain.SignInInput) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, inp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserMockRecorder) SignIn(ctx, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUser)(nil).SignIn), ctx, inp)
}

// SignUp mocks base method.
func (m *MockUser) SignUp(ctx context.Context, inp domain.SignUpInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserMockRecorder) SignUp(ctx, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUser)(nil).SignUp), ctx, inp)
}
